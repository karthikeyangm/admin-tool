#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');       // Socket added
// var app = require('../app').app;
// var cluster = require('cluster');
var debug = require('debug')('express-generator:server');
var http = require('http');
var numCPUs = require('os').cpus().length;
var socketmodel = require('../models/socketModel')
var secretKey = require("../config/config")
const { constants } = require('crypto')
var mongoConn=require("../config/dbConfig")

var jwt = require('jsonwebtoken');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);




/**
 * Create HTTP server.
 */


var https = require('https');
var fs = require('fs');

var privateKey  = fs.readFileSync('./ncloud.netapp.com.pem', 'utf8');
var certificate = fs.readFileSync('./ncloud.netapp.com_12_00_17_F9_BE_76_65_3C_3F_F6_E9_BB_EF_00_01_00_17_F9_BE.pem', 'utf8');

// var privateKey  = fs.readFileSync('/Users/pradep/Desktop/NetApp/NetApp_PWA/Server/bin/key.pem', 'utf8');
// var certificate = fs.readFileSync('/Users/pradep/Desktop/NetApp/NetApp_PWA/Server/bin/cert.pem', 'utf8');

var credentials = {
  key: privateKey, cert: certificate,
  secureOption: constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv2,
  ciphers: getCapCiphers().join(':')+ ':!MD5:!aNULL',
  honorCiphersOrder: true
};

function getCapCiphers() {
  return [
      'ECDHE-RSA-AES128-GCM-SHA256', // TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      'ECDHE-RSA-AES256-GCM-SHA384', // TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      'ECDHE-RSA-AES128-SHA256', // TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
      'ECDHE-RSA-AES256-SHA384', // TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
      'AES256-GCM-SHA384', // TLS_RSA_WITH_AES_256_GCM_SHA384
      'AES256-SHA256', // TLS_RSA_WITH_AES_256_CBC_SHA256
      'AES128-GCM-SHA256', // TLS_RSA_WITH_AES_128_GCM_SHA256
      'AES128-SHA256', // TLS_RSA_WITH_AES_128_CBC_SHA256
  ];
}

//var credentials = {key: privateKey, cert: certificate};
console.log(credentials)
var server = https.createServer(credentials,app);


// Socket added
//var server = require('../app').server;  

/**
 * Listen on provided port, on all network interfaces.
 */
console.log( process.env.IP_ADDRESS)
server.listen(port, process.env.IP_ADDRESS);
server.on('error', onError);
server.on('listening', onListening);

const WebSocket = require('ws');
var io = require('socket.io').listen(server);


io.set('transports', ['polling', 'websocket'])

io.use(function (socket, next) {
  console.log("======socket===")
  // console.log(socket.handshake)
  // console.log(socket.handshake.query.token)
  if (socket.handshake.query && socket.handshake.query.token) {
    jwt.verify(socket.handshake.query.token, secretKey.secretKey, function (err, decoded) {
      if (err) {
        console.log(err)
        return next(new Error('Authentication error'));
      }
      socket.decoded = decoded;
      next();
    });
  } else {
    return next(new Error('Authentication error'));
  }
}).on('connection', (socket) => {
  console.log("======socket===")
  //console.log(socket);
  console.log("Connected to Socket!!" + socket.id);


  // Receiving Todos from client
  socket.on('addWebGlReportData_server', (Todo) => {
    console.log('socketData: ' + JSON.stringify(Todo));
    socketmodel.insertDataBasedonWebGl(socket,io, 'reports', Todo)
    // todoController.addTodo(io,Todo);
  });
  // Receiving Updated Todo from client
  socket.on('updateWebGlData', (Todo) => {
    console.log('socketData: ' + JSON.stringify(Todo));
    // todoController.updateTodo(io,Todo);
  });

  // Receiving Todo to Delete
  socket.on('deleteWebGlData', (Todo) => {
    console.log('socketData: ' + JSON.stringify(Todo));
    // todoController.deleteTodo(io,Todo);
  });

  socket.on('disconnect', function() {
    console.log('Got disconnect!');

 });


 socket.on('setAssestBundle',(socketdata)=>{
    console.log("socketdata")
    console.log(socketdata)
    socketmodel.getAssestBundle(socket,io,socketdata)
  })

  socket.on('setAssestBundle_type',(socketdata)=>{
    console.log("socketdata")
    console.log(socketdata)
    socketmodel.getAssestBundle_type(socket,io,socketdata)
  })

  socket.on('setAssestBundle_details',(socketdata)=>{
    console.log("socketdata")
    console.log(socketdata)
    socketmodel.setAssestBundle_details(socket,io,socketdata)
  })

  // Add enduser app result in db
  socket.on('addEndUserResult', (resultdata) => {
    console.log(resultdata)
    socketmodel.addEndUserResult(io, 'reports', resultdata)
  });


  socket.on('setAllAssestList', (assettype) => {
    console.log(assettype)
    socketmodel.setAllAssestList(io, 'assestdetails', assettype)
  });

  socket.on('setCustomAssest', (assetName) => {
    console.log("setCustomAssest =======" + assetName)
    socketmodel.setCustomAssest(io, 'assestdetails', assetName)
  });



})


// }
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("Server started on "+process.env.IP_ADDRESS+":"+port);

  app.startMongoDB();
}
